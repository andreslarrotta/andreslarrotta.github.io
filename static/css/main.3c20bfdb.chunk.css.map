{"version":3,"sources":["main.3c20bfdb.chunk.css","webpack://src/index.scss","webpack://node_modules/foundation-sites/scss/xy-grid/_grid.scss","webpack://src/Header/styles.scss","webpack://node_modules/foundation-sites/scss/xy-grid/_cell.scss","webpack://node_modules/foundation-sites/scss/xy-grid/_gutters.scss","webpack://src/Header/Mobile/styles.scss","webpack://node_modules/foundation-sites/scss/util/_unit.scss","webpack://src/Home/styles.scss","webpack://node_modules/foundation-sites/scss/util/_breakpoint.scss","webpack://src/Skills/styles.scss","webpack://src/Skills/Menu/styles.scss","webpack://src/Skills/Menu/ItemMenu/styles.scss","webpack://src/Skills/TextSkills/styles.scss","webpack://src/Skills/ItemSkills/styles.scss","webpack://src/Experience/styles.scss","webpack://src/ExperienceAll/styles.scss","webpack://src/ExperienceAll/ItemExperience/styles.scss","webpack://src/Portfolio/ItemPortfolio/styles.scss","webpack://src/Footer/styles.scss","webpack://src/PortfolioAndres/styles.scss"],"names":[],"mappings":"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","file":"main.3c20bfdb.chunk.css","sourcesContent":["@import url(https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap);\nbody{margin:0;font-family:-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}code{font-family:source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace}.Hola{background:greenyellow;display:flex;flex-flow:row wrap}\n\n\nheader{background:white;border-bottom:1px solid black}header .header_container{padding-right:.625rem;padding-left:.625rem;max-width:75rem;margin-left:auto;margin-right:auto;display:flex;flex-flow:row wrap}@media print, screen and (min-width: 40em){header .header_container{padding-right:.9375rem;padding-left:.9375rem}}header .header_column{color:white;font-size:20px;text-align:center;padding:15px;flex:0 0 auto;width:calc(50% - 1.25rem);margin-left:.625rem;margin-right:.625rem}@media print, screen and (max-width: 63.99875em){header .header_column{flex:0 0 auto;width:calc(100% - 1.875rem);margin-left:.9375rem;margin-right:.9375rem}}header .header_column img{width:60px;text-align:left;display:block}@media print, screen and (max-width: 63.99875em){header .header_column img{text-align:center;display:inline}}header .header_column ul{margin:0;padding:0;display:flex;align-items:center;justify-content:space-between}header .header_column ul li a{font-family:Roboto;font-style:normal;font-weight:bold;font-size:15px;line-height:18px;text-align:center;color:black}header .header_column ul li a:hover{text-decoration:underline}header .header_column ul .download{background:black;padding:8px 18px;display:flex;align-items:center;border-radius:20px;transition:all 0.5s}header .header_column ul .download a{color:white}header .header_column ul .download:hover{background:white;outline:1px solid black}header .header_column ul .download:hover a{color:black;text-decoration:none}\n\nheader{background:white;border-bottom:1 px solid black}header.active{position:fixed;z-index:99999999;width:100%;height:100vh}header.active nav{display:block !important}header .header_container{padding-right:.625rem;padding-left:.625rem;max-width:75rem;margin-left:auto;margin-right:auto;display:flex;flex-flow:row wrap}@media print, screen and (min-width: 40em){header .header_container{padding-right:.9375rem;padding-left:.9375rem}}header .header_column_mobile{color:white;font-size:20px;text-align:center;padding:8px;position:relative;flex:0 0 auto;width:calc(50% - 1.25rem);margin-left:.625rem;margin-right:.625rem}header .header_column_mobile_mobile_menu{position:absolute}@media print, screen and (max-width: 63.99875em){header .header_column_mobile{flex:0 0 auto;width:calc(100% - 1.875rem);margin-left:.9375rem;margin-right:.9375rem}}header .header_column_mobile img{width:60px;text-align:left;display:block}@media print, screen and (max-width: 63.99875em){header .header_column_mobile img{text-align:center;display:inline}}header .header_column_mobile nav{display:none}header .header_column_mobile ul{margin:0;padding:0;height:100vh}header .header_column_mobile ul li{display:block;height:10%}header .header_column_mobile ul li a{font-family:Roboto;font-style:normal;font-weight:bold;font-size:15px;line-height:18px;text-align:center;color:black}header .header_column_mobile ul li a:hover{text-decoration:underline}header .header_column_mobile ul .download{background:black;padding:8px 18px;display:flex;align-items:center;border-radius:20px;transition:all 0.5s}header .header_column_mobile ul .download a{color:white}header .header_column_mobile ul .download:hover{background:white;outline:1px solid black}header .header_column_mobile ul .download:hover a{color:black;text-decoration:none}\n\n.home{background:#fee700}.home_container{display:flex;flex-flow:row wrap;padding-right:.625rem;padding-left:.625rem;max-width:75rem;margin-left:auto;margin-right:auto;padding:50px}@media print, screen and (min-width: 40em){.home_container{padding-right:.9375rem;padding-left:.9375rem}}@media print, screen and (max-width: 39.99875em){.home_container{padding:48px 5px}}.home_container_column{flex:0 0 auto;width:calc(50% - 1.25rem);margin-left:.625rem;margin-right:.625rem;text-align:right}@media print, screen and (max-width: 63.99875em){.home_container_column{flex:0 0 auto;width:calc(100% - 1.875rem);margin-left:.9375rem;margin-right:.9375rem;text-align:center}}.home_container_column h1{font-family:Roboto;font-style:normal;font-weight:bold;font-size:40px;line-height:47px;color:#000000}@media print, screen and (max-width: 39.99875em){.home_container_column h1{font-size:27px}}.home_container_column h2{font-family:Roboto;font-style:italic;font-weight:200;font-size:25px;line-height:29px}@media print, screen and (max-width: 39.99875em){.home_container_column h2{font-size:18px}}.home_container_column h3{font-family:Roboto;font-style:normal;font-weight:normal;font-size:25px;line-height:29px}.home_container_column p{font-family:Roboto;font-style:normal;font-weight:300;font-size:15px;line-height:18px}.home_container_column ul{margin:0;padding:0;display:flex;align-items:center;justify-content:flex-end}@media print, screen and (max-width: 63.99875em){.home_container_column ul{justify-content:center}}.home_container_column ul li{list-style:none;margin-right:15px}.home_container_column ul li a img{width:34px}\n\n.skills{background:white;padding:80px 0}@media print, screen and (max-width: 39.99875em){.skills{padding:0 0}}.skills_container{display:flex;flex-flow:row wrap;padding-right:.625rem;padding-left:.625rem;max-width:75rem;margin-left:auto;margin-right:auto}@media print, screen and (min-width: 40em){.skills_container{padding-right:.9375rem;padding-left:.9375rem}}.skills_container_header{flex:0 0 auto;width:calc(100% - 1.25rem);margin-left:.625rem;margin-right:.625rem;display:flex;flex-flow:row wrap;padding-top:40px}.skills_container_header .menu{flex:0 0 auto;width:calc(50% - 1.25rem);margin-left:.625rem;margin-right:.625rem}@media print, screen and (max-width: 63.99875em){.skills_container_header .menu{flex:0 0 auto;width:calc(100% - 1.875rem);margin-left:.9375rem;margin-right:.9375rem;text-align:center}}.skills_container_header .text_skills{flex:0 0 auto;width:calc(50% - 1.25rem);margin-left:.625rem;margin-right:.625rem;display:flex;align-items:center;justify-content:center}@media print, screen and (max-width: 63.99875em){.skills_container_header .text_skills{flex:0 0 auto;width:calc(100% - 1.875rem);margin-left:.9375rem;margin-right:.9375rem;text-align:center}}.skills_container_content{padding-top:40px}\n\nul{margin:0;padding:0;width:100%}\n\n.skills_menu_item{list-style:none;font-family:Roboto;font-style:normal;font-weight:bold;font-size:50px;line-height:59px;color:#000000;text-transform:uppercase;transition:all 0.5s}@media print, screen and (max-width: 39.99875em){.skills_menu_item{font-size:30px}}.skills_menu_item.active{background:black;color:white;cursor:pointer}.skills_menu_item:hover{background:black;color:white;cursor:pointer}\n\n.text_skills p{font-family:Roboto;font-style:normal;font-weight:500;font-size:25px;line-height:29px;color:#000000}@media print, screen and (max-width: 63.99875em){.text_skills p{font-size:15px;width:50%;margin:0 auto;margin-top:20px;font-weight:400}}@media print, screen and (max-width: 39.99875em){.text_skills p{width:100%}}\n\n.skills_container_content_item{width:50%;display:inline-block;padding:20px}@media print, screen and (max-width: 63.99875em){.skills_container_content_item{flex:0 0 auto;width:calc(100% - 1.875rem);margin-left:.9375rem;margin-right:.9375rem;text-align:center;padding:0px}}.skills_container_content_item .skill_image{display:flex;align-items:baseline}.skills_container_content_item .skill_image img{border-radius:10px;width:50px}.skills_container_content_item .skill_image .percent{display:flex;width:100%;font-family:Roboto;font-style:normal;font-weight:500;font-size:25px;line-height:29px;color:#000000}.skills_container_content_item .skill_image .percent .percent_value{background:black;width:58%;display:block;height:10px;border-radius:16px;margin:0 16px}.skills_container_content_item p{font-family:Roboto;font-style:normal;font-weight:300;font-size:17px;color:#000000}\n\n.experience{background:black;color:white;padding:80px 0}@media print, screen and (max-width: 39.99875em){.experience{padding:0 0}}.experience_container{display:flex;flex-flow:row wrap;padding-right:.625rem;padding-left:.625rem;max-width:75rem;margin-left:auto;margin-right:auto}@media print, screen and (min-width: 40em){.experience_container{padding-right:.9375rem;padding-left:.9375rem}}.experience_container_title{flex:0 0 auto;width:calc(100% - 1.25rem);margin-left:.625rem;margin-right:.625rem;height:120px;display:flex;align-items:center;justify-content:right}.experience_container_title h2{font-family:Roboto;font-style:normal;font-weight:bold;font-size:50px;line-height:59px;text-align:right;text-transform:uppercase}@media print, screen and (max-width: 39.99875em){.experience_container_title h2{font-size:30px}}.experience_container_line_time{flex:0 0 auto;width:calc(25% - 1.25rem);margin-left:.625rem;margin-right:.625rem;position:relative}@media print, screen and (max-width: 63.99875em){.experience_container_line_time{flex:0 0 auto;width:calc(8.33333% - 1.875rem);margin-left:.9375rem;margin-right:.9375rem}}@media print, screen and (max-width: 39.99875em){.experience_container_line_time{flex:0 0 auto;width:calc(0% - 1.25rem);margin-left:.625rem;margin-right:.625rem;display:none}}.experience_container_line_time .draw_line{background:white;width:5px;height:100%;position:absolute;left:0}.experience_container_line_time .draw_line::before{content:\"\";width:30px;height:30px;top:-8px;right:-12px;position:absolute;background:white;border-radius:50%}.experience_container_line_time ul{margin:0;padding:0;padding-left:31px;height:100%}@media print, screen and (max-width: 63.99875em){.experience_container_line_time ul{padding-left:20px}}.experience_container_line_time ul li{list-style:none;font-family:Roboto;font-style:normal;font-weight:bold;font-size:20px;line-height:23px;width:100%;height:33%;display:block}@media print, screen and (max-width: 63.99875em){.experience_container_line_time ul li{font-size:15px}}.experience_container_items_experience{flex:0 0 auto;width:calc(50% - 1.25rem);margin-left:.625rem;margin-right:.625rem}@media print, screen and (max-width: 63.99875em){.experience_container_items_experience{flex:0 0 auto;width:calc(83.33333% - 1.875rem);margin-left:.9375rem;margin-right:.9375rem}}@media print, screen and (max-width: 39.99875em){.experience_container_items_experience{flex:0 0 auto;width:calc(100% - 1.25rem);margin-left:.625rem;margin-right:.625rem}}.experience_container_margen{flex:0 0 auto;width:calc(25% - 1.25rem);margin-left:.625rem;margin-right:.625rem}@media print, screen and (max-width: 63.99875em){.experience_container_margen{flex:0 0 auto;width:calc(0% - 1.875rem);margin-left:.9375rem;margin-right:.9375rem}}.experience_container_see_more{text-align:center;width:100%;height:80px;display:flex;align-items:center;justify-content:center}.experience_container_see_more a{text-decoration:none;background:white;color:black;font-family:Roboto;font-weight:500;padding:10px 20px;border-radius:20px;transition:all 0.5s}.experience_container_see_more a:hover{border:1px solid white;background:black;color:white}\n\n.item_experience{padding:20px;margin:25px 0;transition:all 0.5s}.item_experience:hover{background:#fee700;color:black;border-radius:10px;cursor:pointer}.item_experience:hover .item_experience_company img{-webkit-filter:grayscale(1);filter:grayscale(1)}.item_experience:hover .item_experience_see_more a{background:black;color:white}.item_experience_company{display:flex;align-items:baseline}.item_experience_company h3{font-family:Roboto;font-style:normal;font-weight:bold;font-size:18px;line-height:18px;margin-left:10px}@media print, screen and (max-width: 39.99875em){.item_experience_description p{font-size:13px;line-height:17px;margin-bottom:20px}}.item_experience_see_more{text-align:right}.item_experience_see_more a{text-decoration:none;background:white;color:black;font-family:Roboto;font-weight:500;padding:10px 20px;border-radius:20px}\n\n.experience{background:black;color:white;padding:80px 0}@media print, screen and (max-width: 39.99875em){.experience{padding:0 0}}.experience_container{display:flex;flex-flow:row wrap;padding-right:.625rem;padding-left:.625rem;max-width:75rem;margin-left:auto;margin-right:auto}@media print, screen and (min-width: 40em){.experience_container{padding-right:.9375rem;padding-left:.9375rem}}.experience_container_title{flex:0 0 auto;width:calc(100% - 1.25rem);margin-left:.625rem;margin-right:.625rem;height:120px;display:flex;align-items:center;justify-content:right}.experience_container_title h2{font-family:Roboto;font-style:normal;font-weight:bold;font-size:50px;line-height:59px;text-align:right;text-transform:uppercase}@media print, screen and (max-width: 39.99875em){.experience_container_title h2{font-size:30px}}.experience_container_line_time_all{flex:0 0 auto;width:calc(25% - 1.25rem);margin-left:.625rem;margin-right:.625rem;position:relative}@media print, screen and (max-width: 63.99875em){.experience_container_line_time_all{flex:0 0 auto;width:calc(8.33333% - 1.875rem);margin-left:.9375rem;margin-right:.9375rem}}@media print, screen and (max-width: 39.99875em){.experience_container_line_time_all{flex:0 0 auto;width:calc(0% - 1.25rem);margin-left:.625rem;margin-right:.625rem;display:none}}.experience_container_line_time_all .draw_line{background:white;width:5px;height:100%;position:absolute;left:0}.experience_container_line_time_all .draw_line::before{content:\"\";width:30px;height:30px;top:-8px;right:-12px;position:absolute;background:white;border-radius:50%}.experience_container_line_time_all ul{margin:0;padding:0;padding-left:31px;height:100%}@media print, screen and (max-width: 63.99875em){.experience_container_line_time_all ul{padding-left:20px}}.experience_container_line_time_all ul li{list-style:none;font-family:Roboto;font-style:normal;font-weight:bold;font-size:20px;line-height:23px;width:100%;height:20%;display:block}@media print, screen and (max-width: 63.99875em){.experience_container_line_time_all ul li{font-size:15px}}.experience_container_items_experience{flex:0 0 auto;width:calc(50% - 1.25rem);margin-left:.625rem;margin-right:.625rem}@media print, screen and (max-width: 63.99875em){.experience_container_items_experience{flex:0 0 auto;width:calc(83.33333% - 1.875rem);margin-left:.9375rem;margin-right:.9375rem}}@media print, screen and (max-width: 39.99875em){.experience_container_items_experience{flex:0 0 auto;width:calc(100% - 1.25rem);margin-left:.625rem;margin-right:.625rem}}.experience_container_margen{flex:0 0 auto;width:calc(25% - 1.25rem);margin-left:.625rem;margin-right:.625rem}@media print, screen and (max-width: 63.99875em){.experience_container_margen{flex:0 0 auto;width:calc(0% - 1.875rem);margin-left:.9375rem;margin-right:.9375rem}}.experience_container_see_more{text-align:center;width:100%;height:80px;display:flex;align-items:center;justify-content:center}.experience_container_see_more a{text-decoration:none;background:white;color:black;font-family:Roboto;font-weight:500;padding:10px 20px;border-radius:20px;transition:all 0.5s}.experience_container_see_more a:hover{border:1px solid white;background:black;color:white}\n\n.item_experience{padding:20px;margin:25px 0;transition:all 0.5s}.item_experience:hover{background:#fee700;color:black;border-radius:10px;cursor:pointer}.item_experience:hover .item_experience_company img{-webkit-filter:grayscale(1);filter:grayscale(1)}.item_experience:hover .item_experience_see_more a{background:black;color:white}.item_experience_company{display:flex;align-items:baseline}.item_experience_company h3{font-family:Roboto;font-style:normal;font-weight:bold;font-size:18px;line-height:18px;margin-left:10px}@media print, screen and (max-width: 39.99875em){.item_experience_description p{font-size:13px;line-height:17px;margin-bottom:20px}}.item_experience_see_more{text-align:right}.item_experience_see_more a{text-decoration:none;background:white;color:black;font-family:Roboto;font-weight:500;padding:10px 20px;border-radius:20px}\n\n.portfolio{background:white;color:black;padding:80px 0}@media print, screen and (max-width: 39.99875em){.portfolio{padding:0 0}}.portfolio_container{display:flex;flex-flow:row wrap;padding-right:.625rem;padding-left:.625rem;max-width:75rem;margin-left:auto;margin-right:auto}@media print, screen and (min-width: 40em){.portfolio_container{padding-right:.9375rem;padding-left:.9375rem}}.portfolio_container_title{flex:0 0 auto;width:calc(100% - 1.25rem);margin-left:.625rem;margin-right:.625rem;height:120px;display:flex;align-items:center;justify-content:right}.portfolio_container_title h2{font-family:Roboto;font-style:normal;font-weight:bold;font-size:50px;line-height:59px;text-align:right;text-transform:uppercase}@media print, screen and (max-width: 39.99875em){.portfolio_container_title h2{font-size:30px}}.portfolio_container_items_portfolio{display:flex;flex-flow:row wrap}\n\n.item_portfolio{flex:0 0 auto;width:calc(33.33333% - 1.25rem);margin-left:.625rem;margin-right:.625rem}@media print, screen and (max-width: 63.99875em){.item_portfolio{flex:0 0 auto;width:calc(100% - 1.875rem);margin-left:.9375rem;margin-right:.9375rem}}.item_portfolio_img{padding:0}.item_portfolio_img img{width:100%;height:150px;border-radius:20px 20px 0px 0}.item_portfolio_text{background:black;color:white;padding:30px;border-radius:0 0 20px 20px;margin-bottom:25px}.item_portfolio_text h3{font-family:Roboto;font-style:normal;font-weight:bold;font-size:13px;line-height:15px;text-transform:uppercase}.item_portfolio_text p{font-family:Roboto;font-style:normal;font-weight:normal;font-size:12px;line-height:14px;text-transform:capitalize}\n\n.footer{background:white}.footer_container{display:flex;flex-flow:row wrap;padding-right:.625rem;padding-left:.625rem;max-width:75rem;margin-left:auto;margin-right:auto;padding:50px}@media print, screen and (min-width: 40em){.footer_container{padding-right:.9375rem;padding-left:.9375rem}}.footer_container ul{margin:0;padding:0;display:flex;align-items:center;justify-content:flex-end}@media print, screen and (max-width: 63.99875em){.footer_container ul{justify-content:center}}.footer_container ul li{list-style:none;margin-right:15px}.footer_container ul li a img{width:34px}\n\n.portfolio{background:white;color:black;padding:80px 0}@media print, screen and (max-width: 39.99875em){.portfolio{padding:0 0}}.portfolio_container{display:flex;flex-flow:row wrap;padding-right:.625rem;padding-left:.625rem;max-width:75rem;margin-left:auto;margin-right:auto}@media print, screen and (min-width: 40em){.portfolio_container{padding-right:.9375rem;padding-left:.9375rem}}.portfolio_container_title{flex:0 0 auto;width:calc(100% - 1.25rem);margin-left:.625rem;margin-right:.625rem;height:120px;display:flex;align-items:center;justify-content:right}.portfolio_container_title h2{font-family:Roboto;font-style:normal;font-weight:bold;font-size:50px;line-height:59px;text-align:right;text-transform:uppercase}@media print, screen and (max-width: 39.99875em){.portfolio_container_title h2{font-size:30px}}.portfolio_container_items_portfolio{display:flex;flex-flow:row wrap}\n\n","@import \"../node_modules/foundation-sites/scss/foundation.scss\";\n@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap');\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n    monospace;\n}\n.Hola {\n  background: greenyellow;\n  @include xy-grid;\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group xy-grid\n////\n\n/// Creates a max width container, designed to house your grid content.\n///\n/// @param {Number} $width [$grid-container] - a width to limit the container to.\n/// @param {Number} $padding [$grid-container-padding] - paddings of the container.\n@mixin xy-grid-container(\n  $width: $grid-container,\n  $padding: $grid-container-padding\n) {\n  @include xy-gutters($gutters: $padding, $gutter-type: padding);\n\n  max-width: $width;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n/// Creates a container for your flex cells.\n///\n/// @param {Keyword} $direction [horizontal] - Either horizontal or vertical direction of cells within.\n/// @param {Boolean} $wrap [true] - If the cells within should wrap or not.\n@mixin xy-grid(\n  $direction: horizontal,\n  $wrap: true\n) {\n  $direction: if($direction == 'horizontal', row, column);\n  $wrap: if($wrap, wrap, nowrap);\n\n  display: flex;\n  flex-flow: $direction $wrap;\n}\n","@import \"../styles/foundation/foundation.scss\";\n\nheader {\n  background: white;\n  border-bottom: 1px solid black;\n  .header {\n    &_container {\n      @include xy-grid-container;\n      @include xy-grid;\n    }\n    &_column {\n      color: white;\n      font-size: 20px;\n      text-align: center;\n      padding: 15px;\n      @include xy-cell(6);\n\n      @include breakpoint(medium down) {\n        @include xy-cell(12);\n      }\n\n      img {\n        width: 60px;\n        text-align: left;\n        display: block;\n\n        @include breakpoint(medium down) {\n          text-align: center;\n          display: inline;\n        }\n      }\n      ul {\n        margin: 0;\n        padding: 0;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n\n        li {\n          a {\n            font-family: Roboto;\n            font-style: normal;\n            font-weight: bold;\n            font-size: 15px;\n            line-height: 18px;\n            text-align: center;\n            color: black;\n\n            &:hover {\n              text-decoration: underline;\n            }\n          }\n        }\n        .download {\n          background: black;\n          padding: 8px 18px;\n          display: flex;\n          align-items: center;\n          border-radius: 20px;\n          transition: all 0.5s;\n\n          a {\n            color: white;\n          }\n          &:hover {\n            background: white;\n            outline: 1px solid black;\n            a {\n              color: black;\n              text-decoration: none;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group xy-grid\n////\n\n/// Returns the appropriate CSS flex value for a cell base.\n///\n/// @param {Keyword} $size [full] - The size of your cell. Accepts `full`, `auto`, `shrink`, `grow`, or any other value representing a cell size (it will be treated as `shrink`).\n///\n/// @returns {List} The cell flex property value.\n@function xy-cell-base($size: full) {\n  @if ($size == 'auto') {\n    @return 1 1 0px;\n  }\n  @else if ($size == 'grow') {\n    @return 1 0 auto;\n  }\n  @else if ($size == 'shrink' or $size == 'full' or zf-is-fraction($size, $allow-no-denominator: true)) {\n    @return 0 0 auto;\n  }\n  @return null;\n}\n\n/// Calculate the size of a cell gutters.\n///\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If `auto`, returns the responsive gutters map `$gutters`. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n///\n/// @returns {Number|Map} The cell gutter size or the responsive gutters map.\n@function xy-cell-gutters(\n  $gutters: $grid-margin-gutters,\n  $breakpoint: null\n) {\n  // For `auto`, returns the responsive map `$gutters`.\n  @if ($breakpoint == 'auto') {\n    @return $gutters;\n  }\n\n  // Use the contextual breakpoint by default.\n  $breakpoint: -zf-current-breakpoint($breakpoint);\n\n  @if ($breakpoint) {\n    @return -zf-get-bp-val($gutters, $breakpoint);\n  }\n  @else {\n    @return -zf-get-bp-val($gutters, $-zf-zero-breakpoint) or 0;\n  }\n}\n\n/// Returns the percentage size of a cell.\n///\n/// @param {Number|List} $size [$grid-columns] - Size to make the cell. You can pass a value in multiple formats, such as `6`, `50%`, `1 of 2` or `1/3`.\n///\n/// @returns {Number} Size of the cell (in percent).\n@function xy-cell-size(\n  $size: $grid-columns\n) {\n  @return fraction-to-percentage($size, $denominator: $grid-columns);\n}\n\n/// Returns the appropriate CSS value for a cell size.\n///\n/// Gutters-related arguments are required for cells with margin gutters (by default) as the gutter is included in the width.\n///\n/// @param {Keyword|Number} $size [full] - The size of your cell. Can be `full`, `auto`, `shrink` or any fraction like `6`, `50%`, `1 of 2` or `1/2`.\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Type of gutter to output. Accepts `margin`, `padding` or `none`.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If `auto`, returns a map of sizes adapted to responsive gutters. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n///\n/// @returns {Number|String|Map} The cell sizing property value, or a responsive map of them.\n@function xy-cell-size-css(\n  $size: full,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $breakpoint: null\n) {\n  $margin-gutter: 0;\n\n  @if ($size == 'auto' or $size == 'shrink') {\n    @return auto;\n  }\n\n  // For cells with margin gutters, the gutter is included in the width.\n  @if ($gutter-type == 'margin') {\n    $margin-gutter: xy-cell-gutters($gutters, $breakpoint);\n    @if ($margin-gutter == null) {\n      @error 'xy-cell-size: no gutters were found in `$gutters` for \"$breakpoint: #{$breakpoint}\"';\n    }\n  }\n\n  // Calculate the cell size (number)\n  $size-raw: if($size == 'full', 100%, xy-cell-size($size));\n\n  // Calculate the cell CSS size including gutters (string)\n  // If the cell has responsive margin gutters, return a responsive map of sizes.\n  @if type-of($margin-gutter) == 'map' {\n    $responsive-css-sizes: ();\n\n    @each $bp, $mg in $margin-gutter {\n      $size-css: if($mg == 0, $size-raw, calc(#{$size-raw} - #{rem-calc($mg)}));\n      $responsive-css-sizes: map-merge($responsive-css-sizes, ($bp: $size-css));\n    }\n\n    @return $responsive-css-sizes;\n  }\n  // Otherwise, return a single CSS size.\n  @else {\n    $css-size: if($margin-gutter == 0, $size-raw, calc(#{$size-raw} - #{rem-calc($margin-gutter)}));\n    @return $css-size;\n  }\n}\n\n/// Sets base flex properties for cells.\n///\n/// @param {Keyword} $size [full] - The size of your cell. Accepts `full`, `auto`, `shrink`, `grow`, or any other value representing a cell size (it will be treated as `shrink`).\n@mixin xy-cell-base($size: full) {\n  $base: xy-cell-base($size);\n\n  flex: #{$base};\n\n  // Set base styles for \"full\" only\n  @if($size == 'full') {\n    min-height: 0px;\n    min-width: 0px;\n  }\n}\n\n/// Resets a cells width (or height if vertical is true) as well as strips its gutters.\n///\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n@mixin xy-cell-reset($vertical: true) {\n  $direction: if($vertical == true, height, width);\n  #{$direction}: auto;\n  max-#{$direction}: none;\n}\n\n/// Sets sizing properties for cells.\n///\n/// Gutters-related arguments are required for cells with margin gutters (by default) as the gutter is included in the width.\n///\n/// @param {Keyword|Number} $size [full] - The size of your cell. Can be `full` (100% width), `auto` (use all available space), `shrink` (use only the required space) or any fraction (`6`, `50%`, `1 of 2` or `1/2`...).\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Type of gutter to output. Accepts `margin`, `padding` or `none`.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If `auto`, generates sizes adapted for responsive gutters. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n@mixin xy-cell-size(\n  $size: full,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $breakpoint: null,\n  $vertical: false\n) {\n  $sizes: xy-cell-size-css($size, $gutters, $gutter-type, $breakpoint);\n  $direction: if($vertical == true, height, width);\n\n  @if (type-of($sizes) == 'map') {\n    @include -zf-breakpoint-value(auto, $sizes) {\n      #{$direction}: $-zf-bp-value;\n    }\n  }\n  @else {\n    #{$direction}: $sizes;\n  }\n}\n\n/// Sets gutters properties for cells.\n///\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Type of gutter to output. Accepts `margin`, `padding` or `none`.\n/// @param {List} $gutter-position [null] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination. By default `right left` for horizontal cells and `top bottom` for vertical cells.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If `auto`, generates responsive gutters. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n/// @param {Boolean} $vertical [false] - Direction of the gutters to output. See `$gutter-position`.\n@mixin xy-cell-gutters(\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $gutter-position: null,\n  $breakpoint: null,\n  $vertical: false\n) {\n  // Get the default gutter position according to cell direction\n  @if($gutter-position == null) {\n    $gutter-position: if($vertical == true, top bottom, left right);\n  }\n\n  // Get the gutter width for this breakpoint\n  $gutter-width: xy-cell-gutters($gutters, $breakpoint);\n  @if ($gutter-width == null) {\n    @error 'xy-cell-gutters: no gutters were found in `$gutters` for \"$breakpoint: #{$breakpoint}\"';\n  }\n\n  @if ($gutter-type and $gutter-type != none) {\n    @include xy-gutters($gutter-width, $gutter-type, $gutter-position);\n  }\n}\n\n/// Creates a cell for your grid.\n///\n/// @param {Keyword|Number} $size [full] - The size of your cell. Can be `full` (100% width), `auto` (use all available space), `shrink` (use only the required space) or any fraction (`6`, `50%`, `1 of 2` or `1/2`...).\n/// @param {Boolean} $gutter-output [null] - [DEPRECATED] Whether or not to output gutters.\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Type of gutter to output. Accepts `margin`, `padding` or `none`.\n/// @param {List} $gutter-position [null] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination. By default `right left` for horizontal cells and `top bottom` for vertical cells.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If `auto`, generates responsive gutters. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n/// @param {List} $output [(base size gutters)] - Cell parts to output. You will need to generate others parts of the cell seperately, it may not work properly otherwise.\n@mixin xy-cell(\n  $size: full,\n  $gutter-output: null,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $gutter-position: null,\n  $breakpoint: null,\n  $vertical: false,\n  $output: (base size gutters)\n) {\n  // Default for $gutter-output\n  @if ($gutter-output != null) {\n    @warn 'xy-cell: $gutter-output is deprecated and will be removed. See migration notes at https://git.io/foundation-6-6-0';\n    @if ($gutter-output == false) {\n      $output: sl-remove($output, gutters);\n    }\n  }\n\n  @if (index($output, base)) {\n    @include xy-cell-base($size);\n  }\n  @if (index($output, size)) {\n    @include xy-cell-size($size, $gutters, $gutter-type, $breakpoint, $vertical);\n  }\n  @if (index($output, gutters)) {\n    @include xy-cell-gutters($gutters, $gutter-type, $gutter-position, $breakpoint, $vertical);\n  }\n}\n\n/// Creates a single breakpoint sized grid. Used to generate our grid classes.\n///\n/// `xy-cell-static()` is deprecated and will be removed.\n/// Use `xy-cell()` instead with `$output: (size gutters)` to not generate the cell base.\n/// See migration notes at https://git.io/foundation-6-6-0\n///\n/// @deprecated v6.6.0\n///\n/// @param {Keyword|Number} $size [full] - The size of your cell. Can be `full` (100% width), `auto` (use all available space), `shrink` (use only the required space) or any fraction (`6`, `50%`, `1 of 2` or `1/2`...).\n/// @param {Boolean} $gutter-output [true] - Whether or not to output gutters. Always `true` for margin gutters.\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Map or single value for gutters.\n/// @param {String} $breakpoint [null] - The name of the breakpoint size in your gutters map to get the size from. If using with the `breakpoint()` mixin this will be set automatically unless manually entered.\n/// @param {Boolean} $vertical [false] - Set to true to output vertical (height) styles rather than widths.\n@mixin xy-cell-static(\n  $size: full,\n  $gutter-output: true,\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $breakpoint: $-zf-zero-breakpoint,\n  $vertical: false\n) {\n  @warn 'xy-cell-static() mixin is deprecated and will be removed. Use \"xy-cell()\" instead. See migration notes at https://git.io/foundation-6-6-0';\n\n  $gutter: -zf-get-bp-val($gutters, $breakpoint);\n  $gutter-position: if($vertical == true, top bottom, left right);\n\n  $-gutter-output: if($gutter-type == 'margin', true, $gutter-output);\n  $-gutter-margin: if($gutter-type == 'margin', $gutter, 0);\n\n  @include -xy-cell-properties($size, $-gutter-margin, $vertical);\n  @if ($-gutter-output) {\n    @include xy-gutters($gutter, $gutter-type, $gutter-position);\n  }\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group xy-grid\n////\n\n/// Create gutters for a cell/container.\n///\n/// @param {Number|Map} $gutters [$grid-margin-gutters] - Map or single value for gutters.\n/// @param {Keyword} $gutter-type [margin] - Type of gutter to output. Accepts either margin or padding.\n/// @param {List} $gutter-position [right left] - The position to apply gutters to. Accepts `top`, `bottom`, `left`, `right` in any combination.\n/// @param {Boolean} $negative [false] - Whether to apply the gutter as a negative value. Commonly used for nested grids.\n@mixin xy-gutters(\n  $gutters: $grid-margin-gutters,\n  $gutter-type: margin,\n  $gutter-position: right left,\n  $negative: false\n) {\n  $operator: if($negative, '-', '');\n\n  // If we have declared negative gutters, force type to `margin.\n  $gutter-type: if($negative, 'margin', $gutter-type);\n\n  // Output our margin gutters.\n  @if (type-of($gutters) == 'map') {\n    @include -zf-breakpoint-value(auto, $gutters) {\n      $gutter: rem-calc($-zf-bp-value) * 0.5;\n\n      // Loop through each gutter position\n      @each $value in $gutter-position {\n        #{$gutter-type}-#{$value}: unquote(\"#{$operator}#{$gutter}\");\n      }\n    }\n  }\n  @else if (type-of($gutters) == 'number') {\n    $gutter: rem-calc($gutters) * 0.5;\n\n    // Loop through each gutter position\n    @each $value in $gutter-position {\n      #{$gutter-type}-#{$value}: unquote(\"#{$operator}#{$gutter}\");\n    }\n  }\n}\n","@import \"../../styles/foundation/foundation.scss\";\n\nheader {\n  background: white;\n  border-bottom: 1 px solid black;\n  &.active {\n    position: fixed;\n    z-index: 99999999;\n    width: 100%;\n    height: 100vh;\n    nav {\n      display: block !important;\n    }\n  }\n  .header {\n    &_container {\n      @include xy-grid-container;\n      @include xy-grid;\n    }\n    &_column_mobile {\n      color: white;\n      font-size: 20px;\n      text-align: center;\n      padding: 8px;\n      position: relative;\n\n      @include xy-cell(6);\n\n      &_mobile_menu {\n        position: absolute;\n      }\n      @include breakpoint(medium down) {\n        @include xy-cell(12);\n      }\n\n      img {\n        width: 60px;\n\n        text-align: left;\n        display: block;\n\n        @include breakpoint(medium down) {\n          text-align: center;\n          display: inline;\n        }\n      }\n      nav {\n        display: none;\n      }\n      ul {\n        margin: 0;\n        padding: 0;\n        height: 100vh;\n        li {\n          display: block;\n          height: 10%;\n          a {\n            font-family: Roboto;\n            font-style: normal;\n            font-weight: bold;\n            font-size: 15px;\n            line-height: 18px;\n            text-align: center;\n            color: black;\n\n            &:hover {\n              text-decoration: underline;\n            }\n          }\n        }\n        .download {\n          background: black;\n          padding: 8px 18px;\n          display: flex;\n          align-items: center;\n          border-radius: 20px;\n          transition: all 0.5s;\n\n          a {\n            color: white;\n          }\n          &:hover {\n            background: white;\n            outline: 1px solid black;\n            a {\n              color: black;\n              text-decoration: none;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n@import 'math';\n\n$unit-warnings: true !default;\n\n////\n/// @group functions\n////\n\n$global-font-size: 100% !default;\n\n/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.\n///\n/// @param {Number} $num - Number to strip unit from.\n///\n/// @returns {Number} The same number, sans unit.\n@function strip-unit($num) {\n  @return divide($num, $num * 0 + 1);\n}\n\n/// Converts one or more pixel values into matching rem values.\n///\n/// @param {Number|List} $values - One or more values to convert. Be sure to separate them with spaces and not commas. If you need to convert a comma-separated list, wrap the list in parentheses.\n/// @param {Number} $base [null] - The base value to use when calculating the `rem`. If you're using Foundation out of the box, this is 16px. If this parameter is `null`, the function will reference the `$global-font-size` variable as the base.\n///\n/// @returns {List} A list of converted values.\n@function rem-calc($values, $base: null) {\n  $rem-values: ();\n  $count: length($values);\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // If the base font size is a %, then multiply it by 16px\n  // This is because 100% font size = 16px in most all browsers\n  @if unit($base) == '%' {\n    $base: divide($base, 100%) * 16px;\n  }\n\n  // Using rem as base allows correct scaling\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if $count == 1 {\n    @return -zf-to-rem($values, $base);\n  }\n\n  @for $i from 1 through $count {\n    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));\n  }\n\n  @return $rem-values;\n}\n\n// Converts a unitless, pixel, or rem value to em, for use in breakpoints.\n@function -zf-bp-to-em($value) {\n  // Pixel and unitless values are converted to rems\n  @if unit($value) == 'px' or unitless($value) {\n    $value: rem-calc($value, $base: 16px);\n  }\n\n  // Then the value is converted to ems\n  @return strip-unit($value) * 1em;\n}\n\n/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.\n/// @access private\n///\n/// @param {Number} $value - Pixel value to convert.\n/// @param {Number} $base [null] - Base for pixel conversion.\n///\n/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.\n@function -zf-to-rem($value, $base: null) {\n  // Check if the value is a number\n  @if type-of($value) != 'number' {\n    @if $unit-warnings {\n      @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';\n    }\n    @return $value;\n  }\n\n  // Transform em into rem if someone hands over 'em's\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * 1rem;\n  }\n\n  // Calculate rem if units for $value is not rem or em\n  @if unit($value) != 'rem' {\n    $value: divide(strip-unit($value), strip-unit($base)) * 1rem;\n  }\n\n  // Turn 0rem into 0\n  @if $value == 0rem {\n    $value: 0;\n  }\n\n  @return $value;\n}\n\n/// Converts a pixel, percentage, rem or em value to a unitless value based on a given font size. Ideal for working out unitless line heights.\n///\n/// @param {Number} $value - Value to convert to a unitless line height\n/// @param {Number} $base - The font size to use to work out the line height - defaults to $global-font-size\n///\n/// @return {Number} - Unitless number\n@function unitless-calc($value, $base: null) {\n\n  // If no base is defined, defer to the global font size\n  @if $base == null {\n    $base: $global-font-size;\n  }\n\n  // First, lets convert our $base to pixels\n\n  // If the base font size is a %, then multiply it by 16px\n  @if unit($base) == '%' {\n    $base: divide($base, 100%) * 16px;\n  }\n\n  @if unit($base) == 'rem' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  @if unit($base) == 'em' {\n    $base: strip-unit($base) * 16px;\n  }\n\n  // Now let's convert our value to pixels too\n  @if unit($value) == '%' {\n    $value: divide($value, 100%) * $base;\n  }\n\n  @if unit($value) == 'rem' {\n    $value: strip-unit($value) * $base;\n  }\n\n  @if unit($value) == 'em' {\n    $value: strip-unit($value) * $base;\n  }\n\n  // 'px'\n  @if unit($value) == 'px' {\n    @return divide(strip-unit($value), strip-unit($base));\n  }\n\n  // assume that line-heights greater than 10 are meant to be absolute in 'px'\n  @if unitless($value) and ($value > 10) {\n    @return divide($value, strip-unit($base));\n  }\n\n  @return $value;\n}\n","@import \"../styles/foundation/foundation.scss\";\n\n.home {\n  background: #fee700;\n  &_container {\n    @include xy-grid;\n    @include xy-grid-container;\n\n    padding: 50px;\n\n    @include breakpoint(small down) {\n      padding: 48px 5px;\n    }\n\n    &_column {\n      @include xy-cell(6);\n      text-align: right;\n\n      @include breakpoint(medium down) {\n        @include xy-cell(12);\n        text-align: center;\n      }\n\n      h1 {\n        font-family: Roboto;\n        font-style: normal;\n        font-weight: bold;\n        font-size: 40px;\n        line-height: 47px;\n        color: #000000;\n\n        @include breakpoint(small down) {\n          font-size: 27px;\n        }\n      }\n      h2 {\n        font-family: Roboto;\n        font-style: italic;\n        font-weight: 200;\n        font-size: 25px;\n        line-height: 29px;\n        \n        @include breakpoint(small down) {\n          font-size: 18px;\n        }\n      }\n      h3 {\n        font-family: Roboto;\n        font-style: normal;\n        font-weight: normal;\n        font-size: 25px;\n        line-height: 29px;\n      }\n      p {\n        font-family: Roboto;\n        font-style: normal;\n        font-weight: 300;\n        font-size: 15px;\n        line-height: 18px;\n      }\n      ul {\n        margin: 0;\n        padding: 0;\n        display: flex;\n        align-items: center;\n        justify-content: flex-end;\n\n        @include breakpoint(medium down) {\n          justify-content: center;\n        }\n        li {\n          list-style: none;\n          margin-right: 15px;\n\n          a {\n            img {\n              width: 34px;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","// Foundation for Sites\n// https://get.foundation\n// Licensed under MIT Open Source\n\n////\n/// @group breakpoints\n////\n\n////\n/// Patch to fix issue #12080\n\n$-zf-size: null;\n////\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  small: 0,\n  medium: 640px,\n  large: 1024px,\n  xlarge: 1200px,\n  xxlarge: 1440px,\n) !default;\n\n/// A list of named HiDPI breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries for resolutions.\n/// Values must represent the device pixels / web pixels ration and be unitless or in DPPX.\n/// @type Map\n$breakpoints-hidpi: (\n  hidpi-1: 1,\n  hidpi-1-5: 1.5,\n  hidpi-2: 2,\n  retina: 2,\n  hidpi-3: 3\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-zf-zero-breakpoint: small !default;\n\n$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'The first key in the $breakpoints map must have a value of \"0\".';\n}\n@else {\n  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-zf-zero-breakpoint) {\n  // Web standard Pixels per inch. (1ddpx / $std-web-dpi) = 1dpi\n  // See https://www.w3.org/TR/css-values-3/#absolute-lengths\n  $std-web-dpi: 96;\n\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value of the following breakpoint\n  $bp-next: null;\n  // Value for max-width media queries\n  $bp-min: null;\n  // Value for min-width media queries\n  $bp-max: null;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // If named, name of the breakpoint\n  $name: null;\n  // If the breakpoint is a HiDPI breakpoint\n  $hidpi: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n\n  // If a breakpoint name is given, get its value from the $breakpoints/$breakpoints-hidpi map.\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      $name: $bp;\n      $bp: map-get($breakpoints, $name);\n      $bp-next: -zf-map-next($breakpoints, $name);\n    }\n    @else if map-has-key($breakpoints-hidpi, $bp) {\n      $name: $bp;\n      $bp: map-get($breakpoints-hidpi, $name);\n      $bp-next: -zf-map-next-number($breakpoints-hidpi, $bp);\n      $hidpi: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your `$breakpoints` or `$breakpoints-hidpi` setting.';\n    }\n  }\n\n  @if not $name and $dir == 'only' {\n    @warn 'breakpoint(): Only named media queries can have an `only` range.';\n    @return null;\n  }\n\n  // Only 'only' and 'up' have a min limit.\n  @if $dir == 'only' or $dir == 'up' {\n    $bp-min: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));\n  }\n  // Only 'only' and 'down' have a max limit.\n  @if $dir == 'only' or $dir == 'down' {\n    // If the breakpoint is a value, use it as max limit.\n    @if not $name {\n      $bp-max: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));\n    }\n    // If the breakpoint is named, the max limit is the following breakpoint - 1px.\n    @else if $bp-next {\n      // Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125).\n      // Use a precision under 1px to support browser zoom, but not to low to avoid rounding.\n      // See https://github.com/foundation/foundation-sites/issues/11313\n      $bp-max: if($hidpi, $bp-next - divide(1, $std-web-dpi), -zf-bp-to-em($bp-next) - 0.00125);\n    }\n  }\n\n  // Generate the media query string from min and max limits.\n  @if $hidpi {\n    // Generate values in DPI instead of DPPX for an IE9-11/Opera mini compatibility.\n    // See https://caniuse.com/#feat=css-media-resolution\n    $bp-min-dpi: if($bp-min, $bp-min * $std-web-dpi * 1dpi, $bp-min);\n    $bp-max-dpi: if($bp-max, $bp-max * $std-web-dpi * 1dpi, $bp-max);\n    @return zf-str-join(\n      -zf-bp-join($bp-min, $bp-max, '-webkit-min-device-pixel-ratio', '-webkit-max-device-pixel-ratio'),\n      -zf-bp-join($bp-min-dpi, $bp-max-dpi, 'min-resolution', 'max-resolution'),\n      ', ');\n  }\n  @else {\n    @return -zf-bp-join($bp-min, $bp-max);\n  }\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` and `$breakpoints-hidpi` maps, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// If multiple values are passed, the mixin will generate a media query for each of them as described above.\n/// Since the content is duplicated for each breakpoint, this mixin should only be used with properties that\n/// change across breakpoints.\n///\n/// @param {Keyword|Number} $values... - Breakpoint name or px/rem/em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($values...) {\n  @for $i from 1 through length($values) {\n    $value: nth($values, $i);\n    $str: breakpoint($value);\n    $bp: index($-zf-breakpoints-keys, nth($value, 1));\n    $pbp: index($-zf-breakpoints-keys, $print-breakpoint);\n    // Direction of media query (up, down, or only)\n    $dir: if(length($value) > 1, nth($value, 2), up);\n\n    $old-zf-size: null;\n\n    // Make breakpoint size available as a variable\n    @if global-variable-exists(-zf-size) {\n      $old-zf-size: $-zf-size;\n    }\n    $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n    // If $str is still an empty string, no media query is needed\n    @if $str == '' {\n      @content;\n    }\n\n    // Otherwise, wrap the content in a media query\n    @else {\n      // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n      // generate print if the breakpoint affects the print-breakpoint (or smaller).\n      // This means the current condition only needs to be extended so 'down' always generates print.\n      @if $bp != null and ($bp <= $pbp or $dir == down) {\n        @media print, screen and #{$str} {\n          @content;\n        }\n      }\n      @else {\n        @media screen and #{$str} {\n          @content;\n        }\n      }\n    }\n\n    $-zf-size: $old-zf-size !global;\n  }\n}\n\n/// Converts the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -zf-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -zf-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Find the next number in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $number - Number to use as a starting point.\n///\n/// @returns {Mixed} The number following `$number`, if `$number` was found. If `$number` was not found, or `$number` was the biggest number in the map, returns `null`.\n@function -zf-map-next-number($map, $number) {\n\n  $next_number: null;\n\n  @each $k, $v in $map {\n    @if type-of($v) == 'number' and $v > $number and ($next_number == null or $v < $next_number) {\n      $next_number: $v;\n    }\n  }\n\n  @return $next_number;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-breakpoints-less-than($key) {\n  $list: ();\n  $found_key: false;\n\n  @each $name in $-zf-breakpoints-keys {\n    @if ($name == $key) {\n      $found_key: true;\n    }\n    @if not $found_key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoint - a named or non-named breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-closest-named-breakpoint($breakpoint) {\n  $last: $-zf-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      } @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -zf-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -zf-closest-named-breakpoint($value);\n    } @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n/// Return the best breakpoint to use according to the calling context. It returns in order:\n/// 1. the given `$value` argument if it is not null.\n/// 2. the global breakpoint context `$-zf-size` if it is not null (like if called inside then `breakpoint()` mixin)\n/// 3. the given `$default` argument.\n/// @access private\n///\n/// @param {Keyword} $value [null] - Breakpoint to use in priority if non-null.\n/// @param {Keyword} $default [null] - Breakpoint to use by default if no other value can be used.\n///\n/// @return {Keyword} The resolved breakpoint.\n@function -zf-current-breakpoint($value: null, $default: null) {\n  @if ($value != null) {\n    @return $value;\n  }\n  @else if (variable-exists(-zf-size) and type-of($-zf-size) != 'number') and $-zf-size != null {\n    @return $-zf-size;\n  }\n  @else {\n    @return $default;\n  }\n}\n\n/// Return media query string from the given min and/or max limits.\n/// If a limit is equal to `null` or `0`, it is ignored.\n/// @access private\n///\n/// @param {Number} $min [0] - Min media query limit.\n/// @param {Number} $max [0] - Max media query limit.\n/// @param {String} $min-name ['min-width'] - Name of the min media query limit.\n/// @param {String} $delimiter ['max-width'] - Name of the max media query limit.\n///\n/// @returns {String} Media Query string.\n@function -zf-bp-join(\n  $min: 0,\n  $max: 0,\n  $min-name: 'min-width',\n  $max-name: 'max-width'\n) {\n  @return zf-str-join(\n    if($min and $min > 0, '(#{$min-name}: #{$min})', null),\n    if($max and $max > 0, '(#{$max-name}: #{$max})', null),\n    ' and ');\n}\n\n$small-up: '';\n$small-only: '';\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n$medium-up: '';\n$medium-only: '';\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n$large-up: '';\n$large-only: '';\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n$xlarge-up: '';\n$xlarge-only: '';\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n$xxlarge-up: '';\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n","@import \"../styles/foundation/foundation.scss\";\n\n.skills {\n  background: white;\n  padding: 80px 0;\n  @include breakpoint(small down) {\n    padding: 0 0;\n  }\n  &_container {\n    @include xy-grid;\n    @include xy-grid-container;\n\n    &_header {\n      @include xy-cell(12);\n      @include xy-grid;\n      padding-top: 40px;\n\n      .menu {\n        @include xy-cell(6);\n\n        @include breakpoint(medium down) {\n          @include xy-cell(12);\n          text-align: center;\n        }\n      }\n      .text_skills {\n        @include xy-cell(6);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        @include breakpoint(medium down) {\n          @include xy-cell(12);\n          text-align: center;\n        }\n      }\n    }\n    &_content {\n      padding-top: 40px;\n    }\n  }\n}\n","ul {\n  margin: 0;\n  padding: 0;\n  width: 100%;\n}\n","@import \"../../../styles/foundation/foundation.scss\";\n\n.skills_menu_item {\n  list-style: none;\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: bold;\n  font-size: 50px;\n  line-height: 59px;\n  color: #000000;\n  text-transform: uppercase;\n  transition: all 0.5s;\n\n  @include breakpoint(small down) {\n    font-size: 30px;\n  }\n  &.active {\n    background: black;\n    color: white;\n    cursor: pointer;\n  }\n}\n.skills_menu_item:hover {\n  background: black;\n  color: white;\n  cursor: pointer;\n}\n","@import \"../../styles/foundation/foundation.scss\";\n\n.text_skills p {\n  font-family: Roboto;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 25px;\n  line-height: 29px;\n  color: #000000;\n\n  @include breakpoint(medium down) {\n    & {\n      font-size: 15px;\n      width: 50%;\n      margin: 0 auto;\n      margin-top: 20px;\n      font-weight: 400;\n    }\n  }\n  @include breakpoint(small down) {\n    & {\n      width: 100%;\n    }\n  }\n}\n","@import \"../../styles/foundation/foundation.scss\";\n\n.skills_container_content_item {\n  width: 50%;\n  display: inline-block;\n  padding: 20px;\n  @include breakpoint(medium down) {\n    @include xy-cell(12);\n    text-align: center;\n    padding: 0px;\n  }\n  .skill_image {\n    display: flex;\n    align-items: baseline;\n    img {\n      border-radius: 10px;\n      width: 50px;\n    }\n    .percent {\n      display: flex;\n      width: 100%;\n      font-family: Roboto;\n      font-style: normal;\n      font-weight: 500;\n      font-size: 25px;\n      line-height: 29px;\n      color: #000000;\n\n      .percent_value {\n        background: black;\n        width: 58%;\n        display: block;\n        height: 10px;\n        border-radius: 16px;\n        margin: 0 16px;\n      }\n    }\n  }\n  p {\n    font-family: Roboto;\n    font-style: normal;\n    font-weight: 300;\n    font-size: 17px;\n    color: #000000;\n  }\n}\n","@import \"../styles/foundation/foundation.scss\";\n\n.experience {\n  background: black;\n  color: white;\n  padding: 80px 0;\n  @include breakpoint(small down) {\n    padding: 0 0;\n  }\n  &_container {\n    @include xy-grid;\n    @include xy-grid-container;\n\n    &_title {\n      @include xy-cell(12);\n      height: 120px;\n      display: flex;\n      align-items: center;\n      justify-content: right;\n      h2 {\n        font-family: Roboto;\n        font-style: normal;\n        font-weight: bold;\n        font-size: 50px;\n        line-height: 59px;\n        text-align: right;\n        text-transform: uppercase;\n        @include breakpoint(small down) {\n          font-size: 30px;\n        }\n      }\n    }\n    &_line_time {\n      @include xy-cell(3);\n      position: relative;\n      @include breakpoint(medium down) {\n        @include xy-cell(1);\n      }\n      @include breakpoint(small down) {\n        @include xy-cell(0);\n        display: none;\n      }\n      .draw_line {\n        background: white;\n        width: 5px;\n        height: 100%;\n        position: absolute;\n        left: 0;\n        &::before {\n          content: \"\";\n          width: 30px;\n          height: 30px;\n          top: -8px;\n          right: -12px;\n          position: absolute;\n          background: white;\n          border-radius: 50%;\n        }\n      }\n      ul {\n        margin: 0;\n        padding: 0;\n        padding-left: 31px;\n        height: 100%;\n\n        @include breakpoint(medium down) {\n          padding-left: 20px;\n        }\n        li {\n          list-style: none;\n          font-family: Roboto;\n          font-style: normal;\n          font-weight: bold;\n          font-size: 20px;\n          line-height: 23px;\n          width: 100%;\n          height: 33%;\n          display: block;\n          @include breakpoint(medium down) {\n            font-size: 15px;\n          }\n        }\n      }\n    }\n    &_items_experience {\n      @include xy-cell(6);\n\n      @include breakpoint(medium down) {\n        @include xy-cell(10);\n      }\n      @include breakpoint(small down) {\n        @include xy-cell(12);\n      }\n    }\n    &_margen {\n      @include xy-cell(3);\n\n      @include breakpoint(medium down) {\n        @include xy-cell(0);\n      }\n    }\n    &_see_more {\n      text-align: center;\n      width: 100%;\n      height: 80px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      a {\n        text-decoration: none;\n        background: white;\n        color: black;\n        font-family: Roboto;\n        font-weight: 500;\n        padding: 10px 20px;\n        border-radius: 20px;\n        transition: all 0.5s;\n        &:hover {\n          border: 1px solid white;\n          background: black;\n          color: white;\n        }\n      }\n    }\n  }\n}\n","@import \"../styles/foundation/foundation.scss\";\n\n.experience {\n  background: black;\n  color: white;\n  padding: 80px 0;\n  @include breakpoint(small down) {\n    padding: 0 0;\n  }\n  &_container {\n    @include xy-grid;\n    @include xy-grid-container;\n\n    &_title {\n      @include xy-cell(12);\n      height: 120px;\n      display: flex;\n      align-items: center;\n      justify-content: right;\n      h2 {\n        font-family: Roboto;\n        font-style: normal;\n        font-weight: bold;\n        font-size: 50px;\n        line-height: 59px;\n        text-align: right;\n        text-transform: uppercase;\n        @include breakpoint(small down) {\n          font-size: 30px;\n        }\n      }\n    }\n    &_line_time_all {\n      @include xy-cell(3);\n      position: relative;\n      @include breakpoint(medium down) {\n        @include xy-cell(1);\n      }\n      @include breakpoint(small down) {\n        @include xy-cell(0);\n        display: none;\n      }\n      .draw_line {\n        background: white;\n        width: 5px;\n        height: 100%;\n        position: absolute;\n        left: 0;\n        &::before {\n          content: \"\";\n          width: 30px;\n          height: 30px;\n          top: -8px;\n          right: -12px;\n          position: absolute;\n          background: white;\n          border-radius: 50%;\n        }\n      }\n      ul {\n        margin: 0;\n        padding: 0;\n        padding-left: 31px;\n        height: 100%;\n\n        @include breakpoint(medium down) {\n          padding-left: 20px;\n        }\n        li {\n          list-style: none;\n          font-family: Roboto;\n          font-style: normal;\n          font-weight: bold;\n          font-size: 20px;\n          line-height: 23px;\n          width: 100%;\n          height: 20%;\n          display: block;\n          @include breakpoint(medium down) {\n            font-size: 15px;\n          }\n        }\n      }\n    }\n    &_items_experience {\n      @include xy-cell(6);\n\n      @include breakpoint(medium down) {\n        @include xy-cell(10);\n      }\n      @include breakpoint(small down) {\n        @include xy-cell(12);\n      }\n    }\n    &_margen {\n      @include xy-cell(3);\n\n      @include breakpoint(medium down) {\n        @include xy-cell(0);\n      }\n    }\n    &_see_more {\n      text-align: center;\n      width: 100%;\n      height: 80px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      a {\n        text-decoration: none;\n        background: white;\n        color: black;\n        font-family: Roboto;\n        font-weight: 500;\n        padding: 10px 20px;\n        border-radius: 20px;\n        transition: all 0.5s;\n        &:hover {\n          border: 1px solid white;\n          background: black;\n          color: white;\n        }\n      }\n    }\n  }\n}\n","@import \"../../styles/foundation/foundation.scss\";\n\n.item_experience {\n  padding: 20px;\n  margin: 25px 0;\n  transition: all 0.5s;\n\n  &:hover {\n    background: #fee700;\n    color: black;\n    border-radius: 10px;\n    cursor: pointer;\n\n    .item_experience_company {\n      img {\n        filter: grayscale(1);\n      }\n    }\n    .item_experience_see_more {\n      a {\n        background: black;\n        color: white;\n      }\n    }\n  }\n  &_company {\n    display: flex;\n    align-items: baseline;\n\n    h3 {\n      font-family: Roboto;\n      font-style: normal;\n      font-weight: bold;\n      font-size: 18px;\n      line-height: 18px;\n      margin-left: 10px;\n    }\n  }\n  &_description {\n    p {\n      @include breakpoint(small down) {\n        font-size: 13px;\n        line-height: 17px;\n        margin-bottom: 20px;\n      }\n    }\n  }\n  &_see_more {\n    text-align: right;\n    a {\n      text-decoration: none;\n      background: white;\n      color: black;\n      font-family: Roboto;\n      font-weight: 500;\n      padding: 10px 20px;\n      border-radius: 20px;\n    }\n  }\n}\n","@import \"../../styles/foundation/foundation.scss\";\n\n.item_portfolio {\n  @include xy-cell(4);\n  @include breakpoint(medium down) {\n    @include xy-cell(12);\n  }\n  &_img {\n    padding: 0;\n    img {\n      width: 100%;\n      height: 150px;\n      border-radius: 20px 20px 0px 0;\n    }\n  }\n  &_text {\n    background: black;\n    color: white;\n    padding: 30px;\n    border-radius: 0 0 20px 20px;\n    margin-bottom: 25px;\n\n    h3 {\n      font-family: Roboto;\n      font-style: normal;\n      font-weight: bold;\n      font-size: 13px;\n      line-height: 15px;\n      text-transform: uppercase;\n    }\n    p {\n      font-family: Roboto;\n      font-style: normal;\n      font-weight: normal;\n      font-size: 12px;\n      line-height: 14px;\n      text-transform: capitalize;\n    }\n  }\n}\n","@import \"../styles/foundation/foundation.scss\";\n\n.footer {\n    background: white;\n    &_container {\n        @include xy-grid;\n        @include xy-grid-container;\n        padding: 50px;\n\n        ul {\n            margin: 0;\n            padding: 0;\n            display: flex;\n            align-items: center;\n            justify-content: flex-end;\n\n            @include breakpoint(medium down) {\n                justify-content: center;\n            }\n            li {\n                list-style: none;\n                margin-right: 15px;\n\n                a {\n                    img {\n                        width: 34px;\n                    }\n                }\n            }\n        }\n    }\n}\n","@import \"../styles/foundation/foundation.scss\";\n\n.portfolio {\n  background: white;\n  color: black;\n  padding: 80px 0;\n  @include breakpoint(small down) {\n    padding: 0 0;\n  }\n  &_container {\n    @include xy-grid;\n    @include xy-grid-container;\n\n    &_title {\n      @include xy-cell(12);\n      height: 120px;\n      display: flex;\n      align-items: center;\n      justify-content: right;\n      h2 {\n        font-family: Roboto;\n        font-style: normal;\n        font-weight: bold;\n        font-size: 50px;\n        line-height: 59px;\n        text-align: right;\n        text-transform: uppercase;\n        @include breakpoint(small down) {\n          font-size: 30px;\n        }\n      }\n    }\n    &_items_portfolio {\n      @include xy-grid;\n    }\n  }\n}\n"]}